<?php
namespace local_cloudsupport\external;

defined('MOODLE_INTERNAL') || die();

require_once(__DIR__ . '/../../../../lib/externallib.php');

global $CFG;
require_once($CFG->dirroot . '/backup/util/includes/backup_includes.php');
require_once($CFG->dirroot . '/backup/util/includes/restore_includes.php');

use external_function_parameters;
use external_value;
use external_single_structure;
use external_api;
use context_course;
use context_system;
use moodle_exception;

class restore_course extends external_api {

    public static function execute_parameters() {
        return new external_function_parameters([
            'filename' => new external_value(PARAM_FILE, 'Tên file .mbz đã upload vào File API'),
            'courseid' => new external_value(PARAM_INT, 'ID của khóa học sẽ restore vào (0 nếu tạo mới)'),
        ]);
    }

    public static function execute($filename, $courseid) {
        global $CFG, $DB, $USER;

        $fs = get_file_storage();
        $syscontext = context_system::instance();

        $storedfile = $fs->get_file(
            $syscontext->id,
            'local_cloudsupport',
            'backupfiles',
            0,
            '/',
            $filename
        );

        if (!$storedfile) {
            throw new moodle_exception("File not found in File API: $filename");
        }

        if (pathinfo($filename, PATHINFO_EXTENSION) !== 'mbz') {
            throw new moodle_exception('Invalid file format. Must be .mbz');
        }

        // $tempdir = make_request_directory();
        // $temppath = $tempdir . '/' . $filename;
        // $storedfile->copy_content_to($temppath);

        // ✅ Create unique Moodle backup temp directory using contenthash
        $backupid = $storedfile->get_contenthash();
        $tempdir = make_backup_temp_directory($backupid);

        // ✅ Copy .mbz file into that directory
        $zipfilepath = $tempdir . '/' . $filename;
        $storedfile->copy_content_to($zipfilepath);

        // ✅ Extract the backup content into the temp directory
        $fp = get_file_packer('application/vnd.moodle.backup');
        $fp->extract_to_pathname($zipfilepath, $tempdir);

        // ⚠️ Xóa file .mbz để tránh nhầm lẫn khi khởi tạo controller
        @unlink($zipfilepath);

        // Nếu courseid hợp lệ → restore đè
        // Nếu courseid = 0 → tạo mới
        $target = \backup::TARGET_EXISTING_DELETING;
        $restorecontext = context_course::instance($courseid);
        $restorecourseid = $courseid;

        if ($courseid <= 0 || !($DB->record_exists('course', ['id' => $courseid]))) {
            $target = \backup::TARGET_NEW_COURSE;
            $restorecontext = context_system::instance(); // Mặc định
            $restorecourseid = \restore_dbops::create_new_course('', '', 1);
        }

        require_capability('moodle/restore:restorecourse', $restorecontext);

        $controller = new \restore_controller(
            // $temppath,
            $backupid,
            $restorecourseid,
            \backup::INTERACTIVE_NO,
            \backup::MODE_GENERAL,
            $USER->id,
            $target
        );

        if (!$controller) {
            throw new moodle_exception('Failed to create restore controller.');
        }

        if ($controller->get_status() === \backup::STATUS_REQUIRE_CONV) {
            $controller->convert();
        }

        if ($controller->get_status() === \backup::STATUS_SETTING_UI) {
            $controller->finish_ui();
        }

        $precheck = $controller->execute_precheck();
        if ($precheck !== true) {
            $errors = '';
            foreach ($precheck as $error) {
                $errors .= $error . "\n";
            }
            throw new moodle_exception('Precheck failed: ' . $errors);
        }

        $controller->execute_plan();

        if ($controller->get_status() !== \backup::STATUS_COMPLETED) {
            throw new moodle_exception('Restore failed.');
        }

        $restoredcourseid = $controller->get_courseid();
        $controller->destroy();

        return [
            'status' => 'success',
            'message' => 'Course restored successfully.',
            'courseid' => $restoredcourseid,
        ];
    }

    public static function execute_returns() {
        return new external_single_structure([
            'status' => new external_value(PARAM_TEXT, 'Trạng thái'),
            'message' => new external_value(PARAM_TEXT, 'Thông báo'),
            'courseid' => new external_value(PARAM_INT, 'ID của khóa học đã được phục hồi')
        ]);
    }
}
